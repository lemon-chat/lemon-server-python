# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Contact

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Contact(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsContact(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Contact()
        x.Init(buf, n + offset)
        return x

    # Contact
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Contact
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Contact
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Contact
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Contact
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ContactStart(builder): builder.StartObject(4)
def ContactAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def ContactAddFlag(builder, flag): builder.PrependUint16Slot(1, flag, 0)
def ContactAddContentType(builder, contentType): builder.PrependUint8Slot(2, contentType, 0)
def ContactAddContent(builder, content): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)
def ContactEnd(builder): return builder.EndObject()
