# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Image

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CdnImageUploadReq(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCdnImageUploadReq(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CdnImageUploadReq()
        x.Init(buf, n + offset)
        return x

    # CdnImageUploadReq
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CdnImageUploadReq
    def Token(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Lemon.Auth.AuthToken import AuthToken
            obj = AuthToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CdnImageUploadReq
    def Content(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CdnImageUploadReq
    def ContentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CdnImageUploadReq
    def ContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CdnImageUploadReq
    def ContentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def CdnImageUploadReqStart(builder): builder.StartObject(2)
def CdnImageUploadReqAddToken(builder, token): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(token), 0)
def CdnImageUploadReqAddContent(builder, content): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)
def CdnImageUploadReqStartContentVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CdnImageUploadReqEnd(builder): return builder.EndObject()
