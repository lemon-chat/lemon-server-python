# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Register

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RegisterReq(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRegisterReq(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RegisterReq()
        x.Init(buf, n + offset)
        return x

    # RegisterReq
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RegisterReq
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RegisterReq
    def Password(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Lemon.Auth.SaltedPasswordMd5 import SaltedPasswordMd5
            obj = SaltedPasswordMd5()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RegisterReqStart(builder): builder.StartObject(2)
def RegisterReqAddUsername(builder, username): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)
def RegisterReqAddPassword(builder, password): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(password), 0)
def RegisterReqEnd(builder): return builder.EndObject()
