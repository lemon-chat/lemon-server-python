# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Auth

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LoginReq(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLoginReq(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LoginReq()
        x.Init(buf, n + offset)
        return x

    # LoginReq
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LoginReq
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LoginReq
    def CredentialType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # LoginReq
    def Credential(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def LoginReqStart(builder): builder.StartObject(3)
def LoginReqAddUsername(builder, username): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)
def LoginReqAddCredentialType(builder, credentialType): builder.PrependUint8Slot(1, credentialType, 0)
def LoginReqAddCredential(builder, credential): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(credential), 0)
def LoginReqEnd(builder): return builder.EndObject()
