# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Auth

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SaltedPasswordMd5(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSaltedPasswordMd5(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SaltedPasswordMd5()
        x.Init(buf, n + offset)
        return x

    # SaltedPasswordMd5
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SaltedPasswordMd5
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from Md5Content import Md5Content
            obj = Md5Content()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SaltedPasswordMd5Start(builder): builder.StartObject(1)
def SaltedPasswordMd5AddContent(builder, content): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)
def SaltedPasswordMd5End(builder): return builder.EndObject()
